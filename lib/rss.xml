<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Google Hackathon]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>Google Hackathon</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 04 Jun 2024 01:36:19 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 04 Jun 2024 01:36:19 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[MC1]]></title><description><![CDATA[ 
 <br>Architecture Overview:<br>
<br>Framework/Technologies-

<br>Backend: Node.js with Express or Python with Flask/Django<br>

<br>Database: PostgreSQL or MongoDB<br>

<br>Authentication: JWT (JSON Web Tokens)<br>

<br>Communication: RESTful APIs


<br>Key Components:<br>
<br>
User Authentication and Authorization

<br>Registration: Endpoint for new users to create an account.<br>

<br>Login: Endpoint for existing users to log in.<br>

<br>JWT Token Generation: Secure token generation for session management.<br>

<br>Forgot Password: API to request a new password<br>



<br>
User Profile Management

<br>Profile Creation: Endpoint to create and update user profiles with basic information.<br>

<br>Profile Retrieval: Endpoint to fetch user profile information.<br>



<br>
Questionnaire Management

<br>Initial Questions: Endpoint to fetch a set of n random personal questions.
<br>Answer Submission: Endpoint to submit answers to the initial questions.


<br>
Friend Request Management

<br>Send Friend Request: Endpoint to send a friend request to another user.
<br>Accept Friend Request: Endpoint to accept a friend request from another user.
<br>Friend List Retrieval: Endpoint to get the list of friends for a user.


<br>  Endpoints Design<br>
<br>
User Authentication and Authorization

<br>POST /auth/register: Register a new user
<br>POST /auth/login: Log in an existing user
<br>GET /auth/logout: Log out the current user


<br>
User Profile Management

<br>POST /profile: Create or update a user profile
<br>GET /profile/{id}: Get another userâ€™s profile by ID


<br>
Questionnaire Management

<br>GET/ questions: Fetch stores n questions from DB
<br>POST/answers/{id}: Store all answers in DB


<br>
Friend Request Management
- `POST /friends/requests`: Send a friend request
- `POST /friends/requests/{id}/accept`: Accept a friend request
- `GET /friends/{id}`: Get the list of friends for the current user
Copy
DB Collections:

<br>
Users: To store user data 

<br>
Summary: To fetch list of users questions and answers 

<br>Database Schema<br>
<br>users table- 
<br>- `username`: String, required: true, unique: true
- `email`: String, required: true, unique: true
- `password`: String
- `createdAt`: Timestamp
Copy<br>
<br>Login API
<br>Curl command-

curl --location 'http://localhost:4000/api/login' \

--header 'Content-Type: application/json' \

--data-raw '{

"email":"dwivedi.k@northeastern.edu",

"password":"111111"

}'
Copy<br>
<br>Register
<br>curl --location 'http://localhost:4000/api/register' \

--header 'Content-Type: application/json' \

--data-raw '{

"email": "test1@northeastern.edu",

"password": "111111",

"username": "KD1"

}'
Copy<br>
<br>Logout
<br>curl --location 'http://localhost:4000/api/logout' \

--header 'Content-Type: application/json' \

--data-raw '{

"email":"dwivedi.k@northeastern.edu"

}'
Copy<br>
<br>profiles  table
<br>- `_id`: ObjectId
- `userId`: ObjectId (Reference to users)
- `age`: Integer
- `location`: Object
- `interests`: Array of Strings
- `bio`: String
- `created_at`: ISODate
Copy<br>
<br>Create or update profile
<br>curl --location 'http://localhost:4000/api/profile' \

--header 'Content-Type: application/json' \

--data '{

"userId": "665a99bc1ce1051665e3ad71",

"bio":"test1",

"age":25,

"location":{"city": "Dallas","country":"USA"},

"interests":["coding","cooking","hiking"]

}'
Copy<br>
<br>Get user profile 
<br>curl --location 'http://localhost:4000/api/profile/665a99bc1ce1051665e3ad71'
Copy<br>
<br>
Questions Collection

<br>_id: ObjectId
<br>question_text: String
<br>category: String
<br>created_at: ISODate


<br>
<br>Get all questions
<br>curl --location 'http://localhost:4000/api/fetchAll'
Copy<br>
<br>Questions collections have multiple questions and their category, a user has to answer atleast one question from each category. In case the user doesn't want to answer all those questions they can answer the first question
<br>{question_text:"Tell me something interesting about yourself which you want others to know?", category:"Required"}
Copy<br>In such a scenario the validation to answer atleast one question from each category will be dissolved. The client will just share the above question with answer in the required format. Make sure the answer if of at least 100 words.<br>
<br>
UserQuestions Collection

<br>_id: ObjectId
<br>user_id: ObjectId (Reference to Users)
<br>question_id: ObjectId (Reference to Questions)
<br>answer: String
<br>created_at: ISODate


<br>
<br>Submit answers to the initial questions
<br>curl --location 'http://localhost:4000/api/questions/answers' \
--header 'Content-Type: application/json' \
--data '{
     "userId": "665a99bc1ce1051665e3ad71",
     "questionAnsObj":[{"question_id":"665ce6934020a58dd1a46103","answer":"Kartik Dwivedi"}]
}'

Copy<br>Ensure that from each category at least one question is answered by the user. Add validation checks the frontend to check it and request the user to answer at least one<br>
<br>
FriendRequests Collection

<br>_id: ObjectId
<br>sender_id: ObjectId (Reference to Users)
<br>receiver_id: ObjectId (Reference to Users)
<br>status: String ('pending', 'accepted', 'declined')
<br>created_at: ISODate
<br>updated_at: ISODate


<br>
Friends Collection

<br>_id: ObjectId
<br>user_id: ObjectId (Reference to Users)
<br>friend_id: ObjectId (Reference to Users)
<br>created_at: ISODate


]]></description><link>MC1.html</link><guid isPermaLink="false">MC1.md</guid><pubDate>Tue, 04 Jun 2024 01:30:43 GMT</pubDate></item></channel></rss>